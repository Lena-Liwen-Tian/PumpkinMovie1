{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/user/pages/Auth.js\";\nimport React, { useState, useContext } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/usres/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/signup', 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.emails.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: \"authentication\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Login Required\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, !isLoginMode && React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a name.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(6)],\n    errorText: \"Please enter a valid password, at least 6 characters.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN')));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/user/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","LoadingSpinner","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","useHttpClient","AuthContext","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHandler","event","preventDefault","responseData","JSON","stringify","login","user","id","err","emails"],"mappings":"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","sourcesContent":["import React, {useState,useContext} from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport{\n    VALIDATOR_EMAIL,\n    VALIDATOR_MINLENGTH,\n    VALIDATOR_REQUIRE\n}from '../../shared/util/validators';\nimport {useForm} from '../../shared/hooks/form-hook';\nimport{useHttpClient} from '../../shared/hooks/http-hook';\nimport {AuthContext} from '../../shared/context/auth-context';\n\nconst Auth = () =>{\n    const auth = useContext(AuthContext);\n    const [isLoginMode,setIsLoginMode] = useState(true);\n    const{isLoading,error,sendRequest,clearError} = useHttpClient();\n    const[formState,inputHandler,setFormData] = useForm(\n        {\n        email:{\n            value:'',\n            isValid:false\n        },\n        password:{\n            value:'',\n            isValid:false\n        }\n    },false);\n    const switchModeHandler=()=>{\n        if(!isLoginMode) {\n            setFormData({\n                ...formState.inputs,\n                name:undefined\n            },\n            formState.inputs.email.isValid && formState.inputs.password.isValid\n            );\n        }else{\n            setFormData(\n                {\n                ...formState.inputs,\n                name:{\n                    value:'',\n                    isValid:false\n                }\n                },\n                false\n                );\n        }\n        setIsLoginMode(prevMode=> !prevMode);\n    };\n    const authSubmitHandler = async event =>{\n        event.preventDefault();\n        if(isLoginMode){\n            try{\n                const responseData = await sendRequest(\n                    'http://localhost:5000/api/usres/login',\n                    'POST',\n                    JSON.stringify({\n                        email:formState.inputs.email.value,\n                        password:formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type':'application/json'\n                    }\n                );\n                auth.login(responseData.user.id);\n            }catch(err){}\n        }else{\n            try{\n                const responseData = await sendRequest(\n                    'http://localhost:5000/api/users/signup',\n                    'POST',\n                    JSON.stringify({\n                        name:formState.inputs.name.value,\n                        email:formState.inputs.emails.value,\n                        password:formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type':'application/json'\n                    }\n                );\n                auth.login(responseData.user.id);\n            }catch(err){}\n        }\n    };\n    return (\n        <React.Fragment>\n         \n          <Card className=\"authentication\">\n            {isLoading && <LoadingSpinner asOverlay />}\n            <h2>Login Required</h2>\n            <hr />\n            <form onSubmit={authSubmitHandler}>\n              {!isLoginMode && (\n                <Input\n                  element=\"input\"\n                  id=\"name\"\n                  type=\"text\"\n                  label=\"Your Name\"\n                  validators={[VALIDATOR_REQUIRE()]}\n                  errorText=\"Please enter a name.\"\n                  onInput={inputHandler}\n                />\n              )}\n              <Input\n                element=\"input\"\n                id=\"email\"\n                type=\"email\"\n                label=\"E-Mail\"\n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Please enter a valid email address.\"\n                onInput={inputHandler}\n              />\n              <Input\n                element=\"input\"\n                id=\"password\"\n                type=\"password\"\n                label=\"Password\"\n                validators={[VALIDATOR_MINLENGTH(6)]}\n                errorText=\"Please enter a valid password, at least 6 characters.\"\n                onInput={inputHandler}\n              />\n              <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n              </Button>\n            </form>\n            <Button inverse onClick={switchModeHandler}>\n              SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n            </Button>\n          </Card>\n        </React.Fragment>\n      );\n    };\n    \n    export default Auth;\n    \n\n    \n"]},"metadata":{},"sourceType":"module"}