{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/movies/pages/Movies.js\";\nimport './Movies.css';\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\nimport Searchbutton from '../../shared/components/UIElements/Search';\nimport Filterbutton from '../../shared/components/UIElements/Filter';\n\nconst Movies = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  const [originalmovies, setoriginalmovies] = useState([]);\n  const [filtermovies, setfiltermovies] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/movies`);\n        setfiltermovies(responseData.movies);\n        setoriginalmovies(responseData.movies);\n        setLoadedMovies(responseData.movies);\n      } catch (err) {}\n    };\n\n    fetchMovies();\n  }, []); //Loaded movies is the the original one or changed because of the sorting and filter\n  //added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n  //has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  const sortby = method => {\n    let movies;\n\n    if (method === \"Title (A-Z)\") {\n      movies = LoadedMovies.sort((a, b) => {\n        setSort(method);\n        if (a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if (a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      });\n    } else if (method === \"Year (most recent)\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.Year - a.Year;\n      });\n    } else if (method === \"Runtime (longest)\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n        return a[0] - b[0];\n      });\n    } else if (method === \"Rating (highest)\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.imdbRating - a.imdbRating;\n      });\n    }\n\n    setLoadedMovies(movies);\n  };\n\n  const searchmovie = e => {\n    setSearch(e);\n    let title;\n    let description;\n    title = originalmovies.filter(contact => {\n      return contact.Title.replace(/\\s/g, '').toLowerCase().indexOf(e.replace(/\\s/g, '').toLowerCase()) !== -1;\n    });\n    description = originalmovies.filter(contact => {\n      return contact.Actors.replace(/\\s/g, '').toLowerCase().split(',').join('').indexOf(e.replace(/\\s/g, '').toLowerCase()) !== -1;\n    });\n    setLoadedMovies(title.length > 0 ? title : description);\n  };\n\n  const elements = {\n    \"Year\": {\n      \"Year\": [\"Before 2010\", \"2010 - 2012\", \"2012 - 2014\", \"2014 - 2016\", \"2016 - 2018\", \"2018 - 2020\", \"All\"]\n    },\n    \"Rating\": {\n      \"Rating\": [\"Below 5\", \"5 - 7\", \"7 - 8\", \"8 - 10\", \"All\"]\n    },\n    \"Country\": {\n      \"Country\": [\"USA\", \"Others\", \"All\"]\n    }\n  };\n\n  const changeFilter = (k, v) => {\n    let movies;\n    let valuearr = v.split(\" \");\n\n    if (k === \"Year\") {\n      setFilter(\"Year\");\n      let value = valuearr[valuearr.length - 1];\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (valuearr[0] === \"Before\") {\n        movies = filtermovies.filter(contact => parseInt(contact.Year) < parseInt(value));\n      } else {\n        movies = filtermovies.filter(contact => parseInt(value) - 2 <= parseInt(contact.Year) && parseInt(contact.Year) < parseInt(value));\n      }\n    } else if (k === \"Rating\") {\n      setFilter(\"Rating\");\n      let value = valuearr[valuearr.length - 1];\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (valuearr[0] === \"Below\") {\n        movies = filtermovies.filter(contact => parseInt(contact.imdbRating) < parseInt(value));\n      } else {\n        movies = filtermovies.filter(contact => parseInt(value) - 2 <= parseInt(contact.Year) && parseInt(contact.imdbRating) < parseInt(value));\n      }\n    } else if (k === \"Country\") {\n      setFilter(\"Country\");\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (v === \"USA\") {\n        movies = filtermovies.filter(contact => contact.Country === \"USA\");\n      } else {\n        movies = filtermovies.filter(contact => contact.Country !== \"USA\");\n      }\n    } else if (k === \"Clean Filter\") {\n      movies = originalmovies;\n    }\n\n    setLoadedMovies(movies);\n  };\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, Sort, Filter, Search]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"moviesubtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Sortbutton, {\n    className: \"sortbutton\",\n    items: [\"Title (A-Z)\", \"Year (most recent)\", \"Runtime (longest)\", \"Rating (highest)\"],\n    sortby: sortby,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Searchbutton, {\n    placeholder: \"Search by movie title or actor name\",\n    change: searchmovie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Filterbutton, {\n    title: \"Country\",\n    elements: elements.Country,\n    filterby: changeFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    className: \"page\",\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })))), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Sortbutton","Searchbutton","Filterbutton","Movies","isLoading","error","sendRequest","clearError","LoadedMovies","setLoadedMovies","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","originalmovies","setoriginalmovies","filtermovies","setfiltermovies","fetchMovies","responseData","process","env","REACT_APP_BACKEND_URL","movies","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","sortby","method","sort","a","b","Title","toLowerCase","Year","Runtime","split","imdbRating","searchmovie","e","title","description","filter","contact","replace","indexOf","Actors","join","length","elements","changeFilter","k","v","valuearr","value","parseInt","Country","updatePosts","slice"],"mappings":"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","sourcesContent":["import './Movies.css';\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\nimport Searchbutton from '../../shared/components/UIElements/Search';\nimport Filterbutton from '../../shared/components/UIElements/Filter';\nconst Movies = () => {\n  const {isLoading, error, sendRequest,clearError} = useHttpClient();\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n  const[originalmovies,setoriginalmovies]=useState([]);\n  const[filtermovies,setfiltermovies] = useState([]);\n  \n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n\n      try{          \n        const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/movies`);\n        setfiltermovies(responseData.movies);\n        setoriginalmovies(responseData.movies);\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n      }\n    };\n\n    fetchMovies();\n  },[]);\n//Loaded movies is the the original one or changed because of the sorting and filter\n//added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n//has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n   const sortby = method => {\n     let movies;\n     if(method === \"Title (A-Z)\"){\n        movies = LoadedMovies.sort((a,b)=>{\n        setSort(method);\n        if(a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if(a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      })\n     }else if(method === \"Year (most recent)\"){\n       setSort(method);\n       movies = LoadedMovies.sort((a,b)=>{\n       return b.Year - a.Year;\n      })\n     }else if(method === \"Runtime (longest)\"){\n       setSort(method);\n        movies = LoadedMovies.sort((a,b)=>{\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n\n        return a[0] - b[0];\n       })\n     }else if(method === \"Rating (highest)\"){\n        setSort(method);\n         movies = LoadedMovies.sort((a,b)=>{\n        return b.imdbRating - a.imdbRating;\n       })\n     }\n     setLoadedMovies(movies);\n   }\n\n  const searchmovie = e =>{ \n   \n    setSearch(e);\n    let title;\n    let description;\n    title = originalmovies.filter((contact) =>{\n      return contact.Title.replace(/\\s/g,'').toLowerCase().indexOf(e.replace(/\\s/g,'').toLowerCase()) !== -1 ;\n    });\n    description = originalmovies.filter((contact) =>{\n    return contact.Actors.replace(/\\s/g,'').toLowerCase().split(',').join('').indexOf(e.replace(/\\s/g,'').toLowerCase()) !== -1 ;\n   });\n    setLoadedMovies(title.length > 0 ? title:description);\n  }\n  const elements = {\n    \"Year\":{\"Year\":[\"Before 2010\",\"2010 - 2012\",\"2012 - 2014\",\"2014 - 2016\",\"2016 - 2018\",\"2018 - 2020\",\"All\"]},\n    \"Rating\":{\"Rating\":[\"Below 5\",\"5 - 7\",\"7 - 8\",\"8 - 10\",\"All\"]},\n    \"Country\":{\"Country\":[\"USA\",\"Others\",\"All\"]},\n  }\n  const changeFilter = (k,v) => {\n    let movies;\n    let valuearr = v.split(\" \");\n   if(k === \"Year\"){\n     setFilter(\"Year\");     \n     let value = valuearr[valuearr.length-1];\n     if(valuearr[0]===\"All\") {\n      movies = filtermovies;\n    }\n     else if(valuearr[0] === \"Before\"){\n        movies = filtermovies.filter((contact)=>(parseInt(contact.Year) < parseInt(value)));\n     }else{   \n        movies = filtermovies.filter((contact)=>(parseInt(value)-2 <= parseInt(contact.Year) && parseInt(contact.Year) < parseInt(value)));\n     }\n    \n   }else if(k === \"Rating\"){\n     setFilter(\"Rating\");      \n       let value = valuearr[valuearr.length-1];\n       if(valuearr[0] ===\"All\") {\n         movies = filtermovies;\n       }\n       else if(valuearr[0] === \"Below\"){\n         \n         movies = filtermovies.filter((contact)=>(parseInt(contact.imdbRating) < parseInt(value)));\n       }else{\n        movies = filtermovies.filter((contact)=>(parseInt(value)-2 <= parseInt(contact.Year) && parseInt(contact.imdbRating) < parseInt(value)));\n       }\n     }else if(k === \"Country\"){\n      setFilter(\"Country\");\n      if(valuearr[0]===\"All\") {\n        movies = filtermovies;\n      }\n      else if(v === \"USA\"){\n        movies =filtermovies.filter((contact)=>contact.Country === \"USA\");\n       }else{\n        movies = filtermovies.filter((contact)=>contact.Country !== \"USA\");\n       }     \n  }else if(k === \"Clean Filter\"){\n     movies = originalmovies;\n  }\n  setLoadedMovies(movies);\n}\n\n  useEffect(()=>{\n    const updatePosts=()=>{ \n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,Sort,Filter,Search]);\n    \n  return(       \n    <React.Fragment>\n\n   <table className=\"moviesubtitle\">\n   <tr>\n     <td>\n   <Sortbutton className=\"sortbutton\" items={[\"Title (A-Z)\",\"Year (most recent)\",\"Runtime (longest)\",\"Rating (highest)\"]} sortby={sortby} />\n   </td>\n \n     <td className=\"tablecontent2\">\n    <Searchbutton placeholder = \"Search by movie title or actor name\" change={searchmovie}/>\n     </td>\n     <td className=\"tablecontent3\">\n     <Filterbutton title= \"Country\" elements={elements.Country} filterby={changeFilter}/>\n     </td>\n  \n   \n   <td className=\"tablecontent\">\n     <PaginationPage className=\"page\" postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n     </td>\n     </tr>\n   </table>\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}