{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/showtimes/components/Calendarcell.js\";\nimport React, { useEffect } from 'react';\nimport { addWeeks, subWeeks, addMonths, subMonths, startOfWeek, addDays, format, isSameMonth, isSameDay, endOfWeek, startOfMonth, endOfMonth, parse } from 'date-fns';\nimport './calendar.css';\nimport { useState } from 'react';\nimport ShowTime from '../pages/ShowTime';\nimport { relativeTimeThreshold } from 'moment';\nimport { Link } from 'react-router-dom';\nimport Calendarheader from './Calendarheader';\nimport Calendarday from './Calendarday';\n\nconst Calendarcell = () => {\n  const newDate = new Date(\"2020-03-23\");\n  const [currentWeek, setcurrentWeek] = useState(newDate);\n  const [currentMonth, setcurrentMonth] = useState(newDate);\n  const [selectedDate, setselectedDate] = useState(newDate);\n  const [currentYear, setcurrentYear] = useState(newDate.getFullYear());\n  const [check, setcheck] = useState(false);\n\n  let nextMonth = () => {\n    setcurrentWeek(addWeeks(currentWeek, 1));\n    setcurrentMonth(addWeeks(endOfWeek(currentWeek), 1));\n  };\n\n  let prevMonth = () => {\n    setcurrentWeek(subWeeks(currentWeek, 1));\n    setcurrentMonth(subWeeks(endOfWeek(currentWeek), 1));\n  };\n\n  const startDate = startOfWeek(currentWeek);\n  const endDate = endOfWeek(currentWeek);\n  const dateFormat = \"d\";\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = format(day, dateFormat);\n      let sameday = isSameDay(day, selectedDate) ? \"selected\" : \"\";\n      let showtime = addDays(startDate, i);\n      let m = showtime.getMonth() + 1;\n      let month = showtime.getMonth() + 1 >= 10 ? \"\" : \"0\";\n      let showtimesId = showtime.getFullYear() + \"-\" + month + m + \"-\" + showtime.getDate();\n      days.push(React.createElement(\"div\", {\n        className: `col cell ${sameday}`,\n        key: day,\n        id: day,\n        onClick: () => setselectedDate(addDays(startDate, i)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"link\",\n        to: `/showtime/${showtimesId}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, formattedDate), React.createElement(\"span\", {\n        className: \"bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, formattedDate))));\n      day = addDays(day, 1);\n    }\n\n    rows.push(React.createElement(\"div\", {\n      className: \"row\",\n      key: day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, days));\n    days = [];\n  }\n\n  return React.createElement(\"div\", {\n    className: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, rows);\n};\n\nexport default Calendarcell;","map":{"version":3,"sources":["/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/showtimes/components/Calendarcell.js"],"names":["React","useEffect","addWeeks","subWeeks","addMonths","subMonths","startOfWeek","addDays","format","isSameMonth","isSameDay","endOfWeek","startOfMonth","endOfMonth","parse","useState","ShowTime","relativeTimeThreshold","Link","Calendarheader","Calendarday","Calendarcell","newDate","Date","currentWeek","setcurrentWeek","currentMonth","setcurrentMonth","selectedDate","setselectedDate","currentYear","setcurrentYear","getFullYear","check","setcheck","nextMonth","prevMonth","startDate","endDate","dateFormat","rows","days","day","formattedDate","i","sameday","showtime","m","getMonth","month","showtimesId","getDate","push"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {addWeeks,subWeeks,addMonths,subMonths,startOfWeek,addDays,format,isSameMonth,isSameDay,endOfWeek,startOfMonth,endOfMonth,parse} from 'date-fns';\nimport './calendar.css';\nimport {useState}  from 'react';\nimport ShowTime from '../pages/ShowTime';\nimport { relativeTimeThreshold } from 'moment';\nimport { Link } from 'react-router-dom';\nimport Calendarheader from './Calendarheader';\nimport Calendarday from './Calendarday';\n\n\nconst Calendarcell = () =>{\n   \nconst newDate = new Date(\"2020-03-23\");\nconst [currentWeek,setcurrentWeek] = useState(newDate);\nconst [currentMonth,setcurrentMonth] = useState(newDate);\nconst [selectedDate,setselectedDate] = useState(newDate);\nconst [currentYear,setcurrentYear] = useState(newDate.getFullYear());\nconst[check,setcheck] = useState(false);\nlet nextMonth = () => {\n    setcurrentWeek(addWeeks(currentWeek,1));\n    setcurrentMonth(addWeeks(endOfWeek(currentWeek),1));\n };\n\n let prevMonth = () => {\n     setcurrentWeek(subWeeks(currentWeek,1));\n     setcurrentMonth(subWeeks(endOfWeek(currentWeek),1));\n \n };\n\n  \n    const startDate = startOfWeek(currentWeek);\n    const endDate = endOfWeek(currentWeek);\n\n    const dateFormat = \"d\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n    \n    while (day <= endDate) {\n       \n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        let sameday = isSameDay(day, selectedDate)? \"selected\" : \"\";\n        let showtime = addDays(startDate,i);       \n         let m = showtime.getMonth()+1;\n         let month = showtime.getMonth()+1>=10? \"\":\"0\";\n         let showtimesId = showtime.getFullYear() + \"-\" + month + m +\"-\"+ showtime.getDate(); \n        days.push(\n          \n          <div         \n            className={`col cell ${sameday}` } \n            key={day} id={day} onClick={() => setselectedDate(addDays(startDate, i))}\n            >\n            <Link className =\"link\" to={`/showtime/${showtimesId}`}>\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n            </Link>\n          </div>\n         \n        );\n        day = addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day} >\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n  export default Calendarcell;\n\n "]},"metadata":{},"sourceType":"module"}