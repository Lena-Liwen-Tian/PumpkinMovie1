{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/places/components/Singleplace.js\";\nimport { useParams } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ShowTimeList from '../../showtimes/components/ShowTimeList';\n\nconst Singleplace = props => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [have, sethave] = useState(true);\n  useEffect(() => {\n    const fetchTheatre = async () => {\n      try {\n        const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `${theaterId}/theaterinfo`);\n\n        if (responseData.movies.length === 0) {\n          sethave(false);\n        }\n\n        setLoadedTheatre(responseData.cinema);\n        setLoadedMovies(responseData.movies);\n      } catch (err) {}\n    };\n\n    fetchTheatre();\n  }, [theaterId]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), !isLoading && LoadedTheatre && React.createElement(SingleplaceItem, {\n    name: LoadedTheatre.cinema_name,\n    cinemaid: LoadedTheatre.cinema_id,\n    image: LoadedTheatre.image,\n    address: LoadedTheatre.address,\n    phone: LoadedTheatre.phone,\n    lat: LoadedTheatre.lat,\n    lng: LoadedTheatre.lng,\n    movies: LoadedMovies,\n    imdbID: LoadedMovies.imdbID,\n    have: have,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), !isLoading && LoadedTheatre && React.createElement(ShowTimeList, {\n    items: LoadedMovies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default Singleplace;","map":{"version":3,"sources":["/Users/liwentian/Downloads/PumpkinMovie1/FRONTEND/src/places/components/Singleplace.js"],"names":["useParams","React","useState","useEffect","SingleplaceItem","useHttpClient","LoadingSpinner","Button","Card","ShowTimeList","Singleplace","props","isLoading","error","sendRequest","clearError","theaterId","LoadedTheatre","setLoadedTheatre","LoadedMovies","setLoadedMovies","have","sethave","fetchTheatre","responseData","process","env","REACT_APP_BACKEND_URL","movies","length","cinema","err","cinema_name","cinema_id","image","address","phone","lat","lng","imdbID"],"mappings":";AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDV,aAAa,EAAnE;AACA,QAAMW,SAAS,GAAGhB,SAAS,GAAGgB,SAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,EAAlD;AACA,QAAM,CAACiB,YAAD,EAAcC,eAAd,IAAiClB,QAAQ,CAAC,EAAD,CAA/C;AACF,QAAK,CAACmB,IAAD,EAAMC,OAAN,IAAiBpB,QAAQ,CAAC,IAAD,CAA9B;AACIC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAG,YAAY;AAC/B,UAAG;AACD,cAAMC,YAAY,GAAG,MAAMV,WAAW,CAACW,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAqC,GAAEX,SAAU,cAAlD,CAAtC;;AACA,YAAGQ,YAAY,CAACI,MAAb,CAAoBC,MAApB,KAA+B,CAAlC,EAAqC;AACnCP,UAAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AACCJ,QAAAA,gBAAgB,CAACM,YAAY,CAACM,MAAd,CAAhB;AACAV,QAAAA,eAAe,CAACI,YAAY,CAACI,MAAd,CAAf;AAED,OARD,CAQE,OAAOG,GAAP,EAAY,CACb;AACF,KAXD;;AAaAR,IAAAA,YAAY;AAEb,GAhBQ,EAgBP,CAACP,SAAD,CAhBO,CAAT;AAkBA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCJ,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADf,EAEC,CAACA,SAAD,IAAcK,aAAd,IAA+B,oBAAC,eAAD;AACpC,IAAA,IAAI,EAAIA,aAAa,CAACe,WADc;AAEpC,IAAA,QAAQ,EAAIf,aAAa,CAACgB,SAFU;AAGpC,IAAA,KAAK,EAAEhB,aAAa,CAACiB,KAHe;AAIpC,IAAA,OAAO,EAAIjB,aAAa,CAACkB,OAJW;AAKpC,IAAA,KAAK,EAAIlB,aAAa,CAACmB,KALa;AAMpC,IAAA,GAAG,EAAInB,aAAa,CAACoB,GANe;AAOpC,IAAA,GAAG,EAAIpB,aAAa,CAACqB,GAPe;AAQpC,IAAA,MAAM,EAAInB,YAR0B;AASpC,IAAA,MAAM,EAAIA,YAAY,CAACoB,MATa;AAUpC,IAAA,IAAI,EAAIlB,IAV4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhC,EAaH,CAACT,SAAD,IAAcK,aAAd,IAA8B,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAIE,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAb3B,CADF;AAiBD,CAzCH;;AA4CA,eAAeT,WAAf","sourcesContent":["import { useParams } from 'react-router-dom';\nimport React,{useState,useEffect} from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ShowTimeList from '../../showtimes/components/ShowTimeList';\nconst Singleplace = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies,setLoadedMovies] = useState([]);\nconst[have,sethave] = useState(true);\n    useEffect(() => {\n      const fetchTheatre = async () => {\n        try{          \n          const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `${theaterId}/theaterinfo` )          \n          if(responseData.movies.length === 0) {\n            sethave(false);\n        }\n          setLoadedTheatre(responseData.cinema);\n          setLoadedMovies(responseData.movies);\n          \n        } catch (err) {         \n        }            \n      };\n  \n      fetchTheatre();\n   \n    },[theaterId]);\n\n    return (\n      <React.Fragment>\n      {isLoading && (<div><LoadingSpinner /></div>)}\n      {!isLoading && LoadedTheatre && <SingleplaceItem\n  name = {LoadedTheatre.cinema_name}\n  cinemaid = {LoadedTheatre.cinema_id}\n  image={LoadedTheatre.image}\n  address = {LoadedTheatre.address}\n  phone = {LoadedTheatre.phone}\n  lat = {LoadedTheatre.lat}\n  lng = {LoadedTheatre.lng}\n  movies = {LoadedMovies}\n  imdbID = {LoadedMovies.imdbID}\n  have = {have}/>}\n  {!isLoading && LoadedTheatre &&<ShowTimeList items = {LoadedMovies}/>}\n      </React.Fragment>)\n  \n  };\n\n\nexport default Singleplace;"]},"metadata":{},"sourceType":"module"}