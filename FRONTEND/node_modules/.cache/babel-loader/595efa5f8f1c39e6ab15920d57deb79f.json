{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js\";\nimport './Movies.css';\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []); //Loaded movies is the the original one or changed because of the sorting and filter\n  //added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n  //has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  const sortby = method => {\n    let movies;\n\n    if (method === \"Title\") {\n      movies = LoadedMovies.sort((a, b) => {\n        setSort(method);\n        if (a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if (a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      });\n    } else if (method === \"Year\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.Year - a.Year;\n      });\n    } else if (method === \"Runtime\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n        return a[0] - b[0];\n      });\n    } else if (method === \"Rating\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.imdbRating - a.imdbRating;\n      });\n    }\n\n    setLoadedMovies(movies);\n  };\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, Sort, Filter, Search]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"subtitle-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Sortbutton, {\n    items: [\"Title\", \"Year\", \"Runtime\", \"Rating\"],\n    sortby: sortby,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })))), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Sortbutton","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","sortby","method","sort","a","b","Title","toLowerCase","Year","Runtime","split","imdbRating","updatePosts","slice","length"],"mappings":";AAAA,OAAO,cAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,cAAP,MAA2B,+CAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAK,CAACC,YAAD,EAAcC,eAAd,IAAiCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAK,CAACS,SAAD,EAAWC,YAAX,IAA2BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACW,KAAD,EAAOC,QAAP,IAAmBZ,QAAQ,EAAhC;AACA,QAAK,CAACa,WAAD,EAAaC,cAAb,IAA+Bd,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMe,YAAY,GAAG,EAArB;AACA,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCjB,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACkB,IAAD,EAAMC,OAAN,IAAiBnB,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACoB,MAAD,EAAQC,SAAR,IAAqBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAK,CAACsB,MAAD,EAAQC,SAAR,IAAqBvB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMyB,WAAW,GAAG,YAAS;AAC3Bd,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMe,QAAQ,GAAE,MAAMC,KAAK,CAAE,kCAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDvB,QAAAA,eAAe,CAACmB,YAAY,CAACK,MAAd,CAAf;AACD,OATD,CASE,OAAOC,GAAP,EAAY;AACZrB,QAAAA,QAAQ,CAACqB,GAAG,CAACF,OAAL,CAAR;AACD;;AACDrB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfD;;AAiBAc,IAAAA,WAAW;AACZ,GApBQ,EAoBP,EApBO,CAAT,CAXmB,CAgCrB;AACA;AACA;;AAEE,QAAMU,gBAAgB,GAAGrB,WAAW,GAAGE,YAAvC;AACC,QAAMoB,gBAAgB,GAAGD,gBAAgB,GAAGnB,YAA5C;;AACA,QAAMqB,QAAQ,GAAGC,UAAU,IAAIvB,cAAc,CAACuB,UAAD,CAA7C;;AACA,QAAMC,MAAM,GAAGC,MAAM,IAAI;AACvB,QAAIP,MAAJ;;AACA,QAAGO,MAAM,KAAK,OAAd,EAAsB;AACnBP,MAAAA,MAAM,GAAGzB,YAAY,CAACiC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAClCvB,QAAAA,OAAO,CAACoB,MAAD,CAAP;AACA,YAAGE,CAAC,CAACE,KAAF,CAAQC,WAAR,KAAwBF,CAAC,CAACC,KAAF,CAAQC,WAAR,EAA3B,EAAkD,OAAO,CAAC,CAAR;AAClD,YAAGH,CAAC,CAACE,KAAF,CAAQC,WAAR,KAAwBF,CAAC,CAACC,KAAF,CAAQC,WAAR,EAA3B,EAAkD,OAAO,CAAP;AAClD,eAAO,CAAP;AACD,OALU,CAAT;AAMF,KAPD,MAOM,IAAGL,MAAM,KAAK,MAAd,EAAqB;AAC1BpB,MAAAA,OAAO,CAACoB,MAAD,CAAP;AACCP,MAAAA,MAAM,GAAGzB,YAAY,CAACiC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAClC,eAAOA,CAAC,CAACG,IAAF,GAASJ,CAAC,CAACI,IAAlB;AACA,OAFS,CAAT;AAGD,KALK,MAKA,IAAGN,MAAM,KAAK,SAAd,EAAwB;AAC5BpB,MAAAA,OAAO,CAACoB,MAAD,CAAP;AACCP,MAAAA,MAAM,GAAGzB,YAAY,CAACiC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAClCD,QAAAA,CAAC,GAAGA,CAAC,CAACK,OAAF,CAAUC,KAAV,CAAgB,GAAhB,CAAJ;AACAL,QAAAA,CAAC,GAAGA,CAAC,CAACI,OAAF,CAAUC,KAAV,CAAgB,GAAhB,CAAJ;AAEA,eAAON,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACA,OALS,CAAT;AAMF,KARK,MAQA,IAAGH,MAAM,KAAK,QAAd,EAAuB;AAC1BpB,MAAAA,OAAO,CAACoB,MAAD,CAAP;AACCP,MAAAA,MAAM,GAAGzB,YAAY,CAACiC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAO;AACnC,eAAOA,CAAC,CAACM,UAAF,GAAeP,CAAC,CAACO,UAAxB;AACA,OAFU,CAAT;AAGH;;AACDxC,IAAAA,eAAe,CAACwB,MAAD,CAAf;AACD,GA7BD;;AAgCDjC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMkD,WAAW,GAAC,MAAI;AACtBhC,MAAAA,eAAe,CAACV,YAAY,CAAC2C,KAAb,CAAmBf,gBAAnB,EAAoCD,gBAApC,CAAD,CAAf;AAAuE,KADvE;;AAEAe,IAAAA,WAAW;AAAG,GAHP,EAGQ,CAAC1C,YAAD,EAAcM,WAAd,EAA0BK,IAA1B,EAA+BE,MAA/B,EAAsCE,MAAtC,CAHR,CAAT;AAKA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE,CAAC,OAAD,EAAS,MAAT,EAAgB,SAAhB,EAA0B,QAA1B,CAAnB;AAAwD,IAAA,MAAM,EAAEgB,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEvB,YAA9B;AAA4C,IAAA,WAAW,EAAEF,WAAzD;AAAsE,IAAA,UAAU,EAAEN,YAAY,CAAC4C,MAA/F;AAAuG,IAAA,QAAQ,EAAEf,QAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAJD,CADA,CADA,EAWC3B,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CAXf,EAYC,CAACA,SAAD,IAAcF,YAAd,IAA4B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAES,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZ7B,CADF;AAeC,CA3FH;;AA6FA,eAAeV,MAAf","sourcesContent":["import './Movies.css';\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\n\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n  \n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n//Loaded movies is the the original one or changed because of the sorting and filter\n//added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n//has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n   const sortby = method => {\n     let movies;\n     if(method === \"Title\"){\n        movies = LoadedMovies.sort((a,b)=>{\n        setSort(method);\n        if(a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if(a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      })\n     }else if(method === \"Year\"){\n      setSort(method);\n       movies = LoadedMovies.sort((a,b)=>{\n       return b.Year - a.Year;\n      })\n     }else if(method === \"Runtime\"){\n       setSort(method);\n        movies = LoadedMovies.sort((a,b)=>{\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n\n        return a[0] - b[0];\n       })\n     }else if(method === \"Rating\"){\n        setSort(method);\n         movies = LoadedMovies.sort((a,b)=>{\n        return b.imdbRating - a.imdbRating;\n       })\n     }\n     setLoadedMovies(movies);\n   }\n\n\n  useEffect(()=>{\n    const updatePosts=()=>{ \n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,Sort,Filter,Search]);\n    \n  return(       \n    <React.Fragment>\n    <table className=\"subtitle\">\n    <tr >\n      <td className=\"subtitle-content\">\n      <Sortbutton items={[\"Title\",\"Year\",\"Runtime\",\"Rating\"]} sortby={sortby} />\n      </td>\n     <td>\n     <PaginationPage postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n     </td>\n    </tr>\n    </table>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}