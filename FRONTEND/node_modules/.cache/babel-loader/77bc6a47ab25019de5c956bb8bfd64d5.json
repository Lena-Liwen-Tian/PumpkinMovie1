{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"alph\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        let movies = responseData.movies.sort((a, b) => {\n          return a.Title - b.Title;\n        });\n        setLoadedMovies(movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []); //Loaded movies is the the original one or changed because of the sorting and filter\n  //added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n  //has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, PaginationPage, Sort, Filter, Search]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","sort","a","b","Title","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","updatePosts","slice","length"],"mappings":"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","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"alph\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        let movies = responseData.movies.sort((a,b)=>{\n          return a.Title - b.Title;\n        })\n        setLoadedMovies(movies);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n//Loaded movies is the the original one or changed because of the sorting and filter\n//added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n//has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n    \n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,PaginationPage,Sort,Filter,Search]);\n\n\n\n\n  return(       \n    <React.Fragment>\n    <PaginationPage postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}