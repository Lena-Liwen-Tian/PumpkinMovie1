{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js\";\nimport PlaceList from '../components/PlaceList';\nimport React, { useEffect, useState } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\n\nconst UserPlaces = () => {\n  const [LoadedTheatres, setLoadedTheatres] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  const [originaltheatres, setoriginaltheatres] = useState([]);\n  const [filtertheatres, setfiltertheatres] = useState([]);\n  useEffect(() => {\n    const fetchTheatres = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/theatres`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setoriginaltheatres(responseData.cinemas);\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  }, []);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  const sortby = method => {\n    let theatres;\n\n    if (method === \"Name (A-Z)\") {\n      theatres = LoadedTheatres.sort((a, b) => {\n        setSort(method);\n        if (a.cinema_name.toLowerCase() < b.cinema_name.toLowerCase()) return -1;\n        if (a.cinema_name.toLowerCase() > b.cinema_name.toLowerCase()) return 1;\n        return 0;\n      });\n    } else if (method === \"Distance (nearby)\") {\n      setSort(method);\n      theatres = LoadedTheatres.sort((a, b) => {\n        return a.distance - b.distance;\n      });\n    }\n\n    setLoadedTheatres(theatres);\n  };\n\n  const searchtheatre = e => {\n    setSearch(e);\n    let title;\n    let postcode;\n    title = originaltheatres.filter(contact => {\n      return contact.cinema_name.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1;\n    });\n    postcode = originaltheatres.filter(contact => {\n      return contact.postcode === parseInt(e);\n    });\n    setLoadedTheatres(title === null ? postcode : title);\n  };\n\n  const elements = {\n    \"Distance\": {\n      \"Distance\": [\"within 20 miles\", \"20 - 50 miles\", \"beyond 50 miles\", \"All\"]\n    }\n  };\n\n  const changeFilter = (k, v) => {\n    let theatres;\n    let valuearr = v.split(\" \");\n\n    if (k === \"Distance\") {\n      setFilter(\"Distance\");\n      let value = valuearr[valuearr.length - 2];\n\n      if (valuearr[0] === \"All\") {\n        theatres = LoadedTheatres;\n      } else if (valuearr[0] === \"within\") {\n        theatres = LoadedTheatres.filter(contact => contact.distance < parseInt(value));\n      } else if (valuearr[0] === \"20\") {\n        theatres = LoadedTheatres.filter(contact => 20 <= contact.distance && contact.distance < 50);\n      } else {\n        theatres = LoadedTheatres.filter(contact => contact.distance >= 50);\n      }\n    } else if (k === \"Clean Filter\") {\n      theatres = originaltheatres;\n    }\n\n    setLoadedTheatres(theatres);\n  };\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedTheatres, currentPage, Sort, Filter, Search]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Sortbutton, {\n    className: \"sortbutton\",\n    items: [\"Name (A-Z)\", \"Distance (nearby)\", \"Runtime (longest)\", \"Rating (highest)\"],\n    sortby: sortby,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Searchbutton, {\n    change: searchmovie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Filterbutton, {\n    title: \"Year\",\n    elements: elements.Year,\n    filterby: changeFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Filterbutton, {\n    title: \"Rating\",\n    elements: elements.Rating,\n    filterby: changeFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Filterbutton, {\n    title: \"Country\",\n    elements: elements.Country,\n    filterby: changeFilter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    className: \"page\",\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })))), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), !isLoading && LoadedTheatres && React.createElement(PlaceList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }));\n};\n\nexport default UserPlaces;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js"],"names":["PlaceList","React","useEffect","useState","useHttpClient","LoadingSpinner","PaginationPage","UserPlaces","LoadedTheatres","setLoadedTheatres","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","originaltheatres","setoriginaltheatres","filtertheatres","setfiltertheatres","fetchTheatres","response","fetch","responseData","json","ok","Error","message","cinemas","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","sortby","method","theatres","sort","a","b","cinema_name","toLowerCase","distance","searchtheatre","e","title","postcode","filter","contact","split","join","indexOf","parseInt","elements","changeFilter","k","v","valuearr","value","length","updatePosts","slice","errorHandler","searchmovie","Year","Rating","Country","LoadedMovies"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AAEA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,cAAP,MAA2B,+CAA3B;;AACA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAK,CAACC,cAAD,EAAgBC,iBAAhB,IAAqCN,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAK,CAACO,SAAD,EAAWC,YAAX,IAA2BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACS,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,EAAhC;AACA,QAAK,CAACW,WAAD,EAAaC,cAAb,IAA+BZ,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMa,YAAY,GAAG,EAArB;AACA,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCf,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACgB,IAAD,EAAMC,OAAN,IAAiBjB,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACkB,MAAD,EAAQC,SAAR,IAAqBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAK,CAACoB,MAAD,EAAQC,SAAR,IAAqBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAK,CAACsB,gBAAD,EAAkBC,mBAAlB,IAAuCvB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAK,CAACwB,cAAD,EAAgBC,iBAAhB,IAAqCzB,QAAQ,CAAC,EAAD,CAAlD;AAGAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAM2B,aAAa,GAAG,YAAS;AAC7BlB,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMmB,QAAQ,GAAE,MAAMC,KAAK,CAAE,oCAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDV,QAAAA,mBAAmB,CAACM,YAAY,CAACK,OAAd,CAAnB;AACA5B,QAAAA,iBAAiB,CAACuB,YAAY,CAACK,OAAd,CAAjB;AACD,OATD,CASE,OAAOC,GAAP,EAAY;AACZzB,QAAAA,QAAQ,CAACyB,GAAG,CAACF,OAAL,CAAR;AACD;;AACDzB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfD;;AAiBAkB,IAAAA,aAAa;AACd,GApBQ,EAoBP,EApBO,CAAT;AAsBA,QAAMU,gBAAgB,GAAGzB,WAAW,GAAGE,YAAvC;AACC,QAAMwB,gBAAgB,GAAGD,gBAAgB,GAAGvB,YAA5C;;AACA,QAAMyB,QAAQ,GAAGC,UAAU,IAAI3B,cAAc,CAAC2B,UAAD,CAA7C;;AAEA,QAAMC,MAAM,GAAGC,MAAM,IAAI;AACxB,QAAIC,QAAJ;;AACA,QAAGD,MAAM,KAAK,YAAd,EAA2B;AACxBC,MAAAA,QAAQ,GAAGrC,cAAc,CAACsC,IAAf,CAAoB,CAACC,CAAD,EAAGC,CAAH,KAAO;AACtC5B,QAAAA,OAAO,CAACwB,MAAD,CAAP;AACA,YAAGG,CAAC,CAACE,WAAF,CAAcC,WAAd,KAA8BF,CAAC,CAACC,WAAF,CAAcC,WAAd,EAAjC,EAA8D,OAAO,CAAC,CAAR;AAC9D,YAAGH,CAAC,CAACE,WAAF,CAAcC,WAAd,KAA8BF,CAAC,CAACC,WAAF,CAAcC,WAAd,EAAjC,EAA8D,OAAO,CAAP;AAC9D,eAAO,CAAP;AACD,OALY,CAAX;AAMF,KAPD,MAOM,IAAGN,MAAM,KAAK,mBAAd,EAAkC;AACtCxB,MAAAA,OAAO,CAACwB,MAAD,CAAP;AACAC,MAAAA,QAAQ,GAAGrC,cAAc,CAACsC,IAAf,CAAoB,CAACC,CAAD,EAAGC,CAAH,KAAO;AACtC,eAAOD,CAAC,CAACI,QAAF,GAAaH,CAAC,CAACG,QAAtB;AACA,OAFW,CAAX;AAGD;;AACD1C,IAAAA,iBAAiB,CAACoC,QAAD,CAAjB;AACD,GAhBA;;AAkBF,QAAMO,aAAa,GAAGC,CAAC,IAAG;AAExB7B,IAAAA,SAAS,CAAC6B,CAAD,CAAT;AACA,QAAIC,KAAJ;AACA,QAAIC,QAAJ;AACAD,IAAAA,KAAK,GAAG7B,gBAAgB,CAAC+B,MAAjB,CAAyBC,OAAD,IAAY;AAC1C,aAAOA,OAAO,CAACR,WAAR,CAAoBC,WAApB,GAAkCQ,KAAlC,CAAwC,GAAxC,EAA6CC,IAA7C,CAAkD,EAAlD,EAAsDC,OAAtD,CAA8DP,CAAC,CAACH,WAAF,EAA9D,MAAmF,CAAC,CAA3F;AACD,KAFO,CAAR;AAGAK,IAAAA,QAAQ,GAAG9B,gBAAgB,CAAC+B,MAAjB,CAAyBC,OAAD,IAAY;AAC7C,aAAOA,OAAO,CAACF,QAAR,KAAqBM,QAAQ,CAACR,CAAD,CAApC;AACF,KAFW,CAAX;AAGA5C,IAAAA,iBAAiB,CAAC6C,KAAK,KAAK,IAAV,GAAiBC,QAAjB,GAA0BD,KAA3B,CAAjB;AACD,GAZD;;AAaA,QAAMQ,QAAQ,GAAG;AACf,gBAAW;AAAC,kBAAW,CAAC,iBAAD,EAAmB,eAAnB,EAAmC,iBAAnC,EAAqD,KAArD;AAAZ;AADI,GAAjB;;AAGA,QAAMC,YAAY,GAAG,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC5B,QAAIpB,QAAJ;AACA,QAAIqB,QAAQ,GAAGD,CAAC,CAACP,KAAF,CAAQ,GAAR,CAAf;;AACD,QAAGM,CAAC,KAAK,UAAT,EAAoB;AAClB1C,MAAAA,SAAS,CAAC,UAAD,CAAT;AACA,UAAI6C,KAAK,GAAGD,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAgB,CAAjB,CAApB;;AACA,UAAGF,QAAQ,CAAC,CAAD,CAAR,KAAc,KAAjB,EAAwB;AACtBrB,QAAAA,QAAQ,GAAGrC,cAAX;AACF,OAFA,MAGK,IAAG0D,QAAQ,CAAC,CAAD,CAAR,KAAgB,QAAnB,EAA4B;AAC/BrB,QAAAA,QAAQ,GAAGrC,cAAc,CAACgD,MAAf,CAAuBC,OAAD,IAAYA,OAAO,CAACN,QAAR,GAAmBU,QAAQ,CAACM,KAAD,CAA7D,CAAX;AACD,OAFI,MAEC,IAAID,QAAQ,CAAC,CAAD,CAAR,KAAgB,IAApB,EAAyB;AAC5BrB,QAAAA,QAAQ,GAAGrC,cAAc,CAACgD,MAAf,CAAuBC,OAAD,IAAY,MAAMA,OAAO,CAACN,QAAd,IAA0BM,OAAO,CAACN,QAAR,GAAmB,EAA/E,CAAX;AACF,OAFK,MAED;AACHN,QAAAA,QAAQ,GAAGrC,cAAc,CAACgD,MAAf,CAAuBC,OAAD,IAAYA,OAAO,CAACN,QAAR,IAAoB,EAAtD,CAAX;AACD;AACF,KAbD,MAaM,IAAGa,CAAC,KAAK,cAAT,EAAwB;AAC5BnB,MAAAA,QAAQ,GAAGpB,gBAAX;AACF;;AACDhB,IAAAA,iBAAiB,CAACoC,QAAD,CAAjB;AACA,GApBA;;AAwBC3C,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMmE,WAAW,GAAC,MAAI;AACtBnD,MAAAA,eAAe,CAACV,cAAc,CAAC8D,KAAf,CAAqB9B,gBAArB,EAAsCD,gBAAtC,CAAD,CAAf;AAAyE,KADzE;;AAEA8B,IAAAA,WAAW;AAAG,GAHP,EAGQ,CAAC7D,cAAD,EAAgBM,WAAhB,EAA4BK,IAA5B,EAAiCE,MAAjC,EAAwCE,MAAxC,CAHR,CAAT;;AAKA,QAAMgD,YAAY,GAAG,MAAK;AACxB1D,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAMA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,YAAtB;AAAmC,IAAA,KAAK,EAAE,CAAC,YAAD,EAAc,mBAAd,EAAkC,mBAAlC,EAAsD,kBAAtD,CAA1C;AAAqH,IAAA,MAAM,EAAE8B,MAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,CADF,EAKE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAE6B,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CALF,EAQE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,MAArB;AAA4B,IAAA,QAAQ,EAAEV,QAAQ,CAACW,IAA/C;AAAqD,IAAA,QAAQ,EAAEV,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CARF,EAWE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,QAArB;AAA8B,IAAA,QAAQ,EAAED,QAAQ,CAACY,MAAjD;AAAyD,IAAA,QAAQ,EAAEX,YAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAXF,EAcE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,SAArB;AAA+B,IAAA,QAAQ,EAAED,QAAQ,CAACa,OAAlD;AAA2D,IAAA,QAAQ,EAAEZ,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAdF,EAmBA;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,MAA1B;AAAiC,IAAA,YAAY,EAAE/C,YAA/C;AAA6D,IAAA,WAAW,EAAEF,WAA1E;AAAuF,IAAA,UAAU,EAAE8D,YAAY,CAACR,MAAhH;AAAwH,IAAA,QAAQ,EAAE3B,QAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnBA,CADG,CADF,EA2BC/B,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CA3Bf,EA4BC,CAACA,SAAD,IAAcF,cAAd,IAAgC,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAES,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BjC,CADF;AA+BC,CA5IH;;AA8IA,eAAeV,UAAf","sourcesContent":["import PlaceList from '../components/PlaceList';\nimport React, { useEffect,useState } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nconst UserPlaces = () => {\n  const[LoadedTheatres,setLoadedTheatres] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n  const[originaltheatres,setoriginaltheatres]=useState([]);\n  const[filtertheatres,setfiltertheatres] = useState([]);\n\n\n  useEffect(()=>{\n\n    const fetchTheatres = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/theatres`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setoriginaltheatres(responseData.cinemas)\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  },[]);\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n   const sortby = method => {\n    let theatres;\n    if(method === \"Name (A-Z)\"){\n       theatres = LoadedTheatres.sort((a,b)=>{\n       setSort(method);\n       if(a.cinema_name.toLowerCase() < b.cinema_name.toLowerCase()) return -1;\n       if(a.cinema_name.toLowerCase() > b.cinema_name.toLowerCase()) return 1;\n       return 0;\n     })\n    }else if(method === \"Distance (nearby)\"){\n      setSort(method);\n      theatres = LoadedTheatres.sort((a,b)=>{\n      return a.distance - b.distance;\n     })\n    }\n    setLoadedTheatres(theatres);\n  }\n\n const searchtheatre = e =>{ \n  \n   setSearch(e);\n   let title;\n   let postcode;\n   title = originaltheatres.filter((contact) =>{\n     return contact.cinema_name.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1 ;\n   });\n   postcode = originaltheatres.filter((contact) =>{\n     return contact.postcode === parseInt(e) ;\n  });\n   setLoadedTheatres(title === null ? postcode:title);\n }\n const elements = {\n   \"Distance\":{\"Distance\":[\"within 20 miles\",\"20 - 50 miles\",\"beyond 50 miles\",\"All\"]}\n }\n const changeFilter = (k,v) => {\n   let theatres;\n   let valuearr = v.split(\" \");\n  if(k === \"Distance\"){\n    setFilter(\"Distance\");     \n    let value = valuearr[valuearr.length-2];\n    if(valuearr[0]===\"All\") {\n      theatres = LoadedTheatres;\n   }\n    else if(valuearr[0] === \"within\"){\n      theatres = LoadedTheatres.filter((contact)=>(contact.distance < parseInt(value)));\n    }else if (valuearr[0] === \"20\"){   \n       theatres = LoadedTheatres.filter((contact)=>(20 <= contact.distance && contact.distance < 50));\n    }else{\n      theatres = LoadedTheatres.filter((contact)=>(contact.distance >= 50));\n    }  \n  }else if(k === \"Clean Filter\"){\n    theatres = originaltheatres;\n }\n setLoadedTheatres(theatres);\n}\n\n\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n    setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedTheatres,currentPage,Sort,Filter,Search]);\n\n  const errorHandler = () =>{\n    setError=(null);\n  }\n   \n  \n\n  return(       \n    <React.Fragment>\n      <table className=\"subtitle\">\n   <tr>\n     <td>\n   <Sortbutton className=\"sortbutton\" items={[\"Name (A-Z)\",\"Distance (nearby)\",\"Runtime (longest)\",\"Rating (highest)\"]} sortby={sortby} />\n   </td>\n \n     <td className=\"tablecontent2\">\n    <Searchbutton change={searchmovie}/>\n     </td>\n     <td className=\"tablecontent3\">\n     <Filterbutton title= \"Year\" elements={elements.Year} filterby={changeFilter}/>\n     </td>\n     <td className=\"tablecontent3\">\n     <Filterbutton title= \"Rating\" elements={elements.Rating} filterby={changeFilter}/>\n     </td>\n     <td className=\"tablecontent3\">\n     <Filterbutton title= \"Country\" elements={elements.Country} filterby={changeFilter}/>\n     </td>\n  \n   \n   <td className=\"tablecontent\">\n     <PaginationPage className=\"page\" postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n     </td>\n     </tr>\n   </table>\n      \n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedTheatres && <PlaceList items={currentPosts} />}\n     </React.Fragment>)\n  };\n\nexport default UserPlaces;\n"]},"metadata":{},"sourceType":"module"}