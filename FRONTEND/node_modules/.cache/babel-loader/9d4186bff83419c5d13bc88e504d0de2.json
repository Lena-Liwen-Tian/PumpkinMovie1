{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js\";\nimport PlaceList from '../components/PlaceList';\nimport React, { useEffect, useState } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\n\nconst UserPlaces = () => {\n  const [LoadedTheatres, setLoadedTheatres] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  const [originatheatres, setoriginatheatres] = useState([]);\n  const [filtertheatres, setfiltertheatres] = useState([]);\n  useEffect(() => {\n    const fetchTheatres = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/theatres`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  }, []);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedTheatres, currentPage, PaginationPage]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: LoadedTheatres.length,\n    currentpage: currentPage,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), !isLoading && LoadedTheatres && React.createElement(PlaceList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nexport default UserPlaces;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js"],"names":["PlaceList","React","useEffect","useState","useHttpClient","LoadingSpinner","PaginationPage","UserPlaces","LoadedTheatres","setLoadedTheatres","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","originatheatres","setoriginatheatres","filtertheatres","setfiltertheatres","fetchTheatres","response","fetch","responseData","json","ok","Error","message","cinemas","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","updatePosts","slice","errorHandler","length"],"mappings":"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","sourcesContent":["import PlaceList from '../components/PlaceList';\nimport React, { useEffect,useState } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nconst UserPlaces = () => {\n  const[LoadedTheatres,setLoadedTheatres] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n  const[originatheatres,setoriginatheatres]=useState([]);\n  const[filtertheatres,setfiltertheatres] = useState([]);\n\n  useEffect(()=>{\n\n    const fetchTheatres = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/theatres`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  },[]);\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n    setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedTheatres,currentPage,PaginationPage]);\n\n  const errorHandler = () =>{\n    setError=(null);\n  }\n   \n  \n\n  return(       \n    <React.Fragment>\n    <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedTheatres.length} currentpage={currentPage} paginate={paginate}/>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedTheatres && <PlaceList items={currentPosts} />}\n     </React.Fragment>)\n  };\n\nexport default UserPlaces;\n"]},"metadata":{},"sourceType":"module"}