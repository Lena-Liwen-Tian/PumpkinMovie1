{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js\";\nimport './Movies.css';\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\nimport Searchbutton from '../../shared/components/UIElements/Search';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []); //Loaded movies is the the original one or changed because of the sorting and filter\n  //added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n  //has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  const sortby = method => {\n    let movies;\n\n    if (method === \"Title\") {\n      movies = LoadedMovies.sort((a, b) => {\n        setSort(method);\n        if (a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if (a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      });\n    } else if (method === \"Year\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.Year - a.Year;\n      });\n    } else if (method === \"Runtime\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n        return a[0] - b[0];\n      });\n    } else if (method === \"Rating\") {\n      setSort(method);\n      movies = LoadedMovies.sort((a, b) => {\n        return b.imdbRating - a.imdbRating;\n      });\n    }\n\n    setLoadedMovies(movies);\n  };\n\n  const searchmovie = e => {\n    setSearch(e.target.value);\n    let title;\n    let description;\n    title = LoadedMovies.filter(contact => {\n      return contact.Title.toLowerCase().split(' ').join('').indexOf(Search.toLowerCase()) !== -1;\n    });\n    description = LoadedMovies.filter(contact => {\n      return contact.Plot.toLowerCase().split(' ').join('').indexOf(Search.toLowerCase()) !== -1;\n    });\n    setLoadedMovies(title === null ? description : title);\n  };\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, Sort, Filter, Search]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"subtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Sortbutton, {\n    className: \"sortbutton\",\n    items: [\"Title\", \"Year\", \"Runtime\", \"Rating\"],\n    sortby: sortby,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Searchbutton, {\n    value: search,\n    change: searchmovie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"tablecontent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    className: \"page\",\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })))), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Sortbutton","Searchbutton","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","sortby","method","sort","a","b","Title","toLowerCase","Year","Runtime","split","imdbRating","searchmovie","e","target","value","title","description","filter","contact","join","indexOf","Plot","updatePosts","slice","search","length"],"mappings":"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","sourcesContent":["import './Movies.css';\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sortbutton from '../../shared/components/UIElements/Sort';\nimport Searchbutton from '../../shared/components/UIElements/Search';\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n  \n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n//Loaded movies is the the original one or changed because of the sorting and filter\n//added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n//has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n   const sortby = method => {\n     let movies;\n     if(method === \"Title\"){\n        movies = LoadedMovies.sort((a,b)=>{\n        setSort(method);\n        if(a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n        if(a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n        return 0;\n      })\n     }else if(method === \"Year\"){\n      setSort(method);\n       movies = LoadedMovies.sort((a,b)=>{\n       return b.Year - a.Year;\n      })\n     }else if(method === \"Runtime\"){\n       setSort(method);\n        movies = LoadedMovies.sort((a,b)=>{\n        a = a.Runtime.split(\" \");\n        b = b.Runtime.split(\" \");\n\n        return a[0] - b[0];\n       })\n     }else if(method === \"Rating\"){\n        setSort(method);\n         movies = LoadedMovies.sort((a,b)=>{\n        return b.imdbRating - a.imdbRating;\n       })\n     }\n     setLoadedMovies(movies);\n   }\n\n  const searchmovie = e =>{  \n    setSearch(e.target.value);\n    let title;\n    let description;\n    title = LoadedMovies.filter((contact) =>{\n      return contact.Title.toLowerCase().split(' ').join('').indexOf(Search.toLowerCase()) !== -1 ;\n    });\n    description = LoadedMovies.filter((contact) =>{\n      return contact.Plot.toLowerCase().split(' ').join('').indexOf(Search.toLowerCase()) !== -1 ;\n   });\n    setLoadedMovies(title === null ? description:title);\n  }\n\n  useEffect(()=>{\n    const updatePosts=()=>{ \n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,Sort,Filter,Search]);\n    \n  return(       \n    <React.Fragment>\n\n   <table className=\"subtitle\">\n   <tr>\n     <td>\n   <Sortbutton className=\"sortbutton\" items={[\"Title\",\"Year\",\"Runtime\",\"Rating\"]} sortby={sortby} />\n   </td>\n     <td>\n    <Searchbutton value={search} change={searchmovie}/>\n     </td>\n   <td className=\"tablecontent\">\n     <PaginationPage className=\"page\" postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n     </td>\n     </tr>\n   </table>\n      \n\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}