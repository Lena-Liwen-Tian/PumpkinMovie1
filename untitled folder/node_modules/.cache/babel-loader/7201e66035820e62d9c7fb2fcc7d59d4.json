{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js\";\nimport PlaceList from '../components/PlaceList';\nimport React, { useEffect, useState } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\n\nconst UserPlaces = () => {\n  const [LoadedTheatres, setLoadedTheatres] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  const [originatheatres, setoriginatheatres] = useState([]);\n  const [filtertheatres, setfiltertheatres] = useState([]);\n  useEffect(() => {\n    const fetchTheatres = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/theatres`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setoriginatheatres(responseData.cinemas);\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  }, []);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  const sortby = method => {\n    let theatres;\n\n    if (method === \"Name(A-Z)\") {\n      theatres = LoadedTheatres.sort((a, b) => {\n        setSort(method);\n        if (a.cinema_name.toLowerCase() < b.cinema_name.toLowerCase()) return -1;\n        if (a.cinema_name.toLowerCase() > b.cinema_name.toLowerCase()) return 1;\n        return 0;\n      });\n    } else if (method === \"Distance (nearby)\") {\n      setSort(method);\n      theatres = LoadedTheatres.sort((a, b) => {\n        return a.distance - b.distance;\n      });\n    }\n\n    setLoadedTheatres(theatres);\n  };\n\n  const searchtheatre = e => {\n    setSearch(e);\n    let title;\n    title = originaltheatres.filter(contact => {\n      return contact.Title.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1;\n    });\n    description = originalmovies.filter(contact => {\n      return contact.Plot.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1;\n    });\n    setLoadedMovies(title === null ? description : title);\n  };\n\n  const elements = {\n    \"Year\": {\n      \"Year\": [\"Before 2010\", \"2010 - 2012\", \"2012 - 2014\", \"2014 - 2016\", \"2016 - 2018\", \"2018 - 2020\", \"All\"]\n    },\n    \"Rating\": {\n      \"Rating\": [\"Below 5\", \"5 - 7\", \"7 - 8\", \"8 - 10\", \"All\"]\n    },\n    \"Country\": {\n      \"Country\": [\"USA\", \"Others\", \"All\"]\n    }\n  };\n\n  const changeFilter = (k, v) => {\n    let movies;\n    let valuearr = v.split(\" \");\n\n    if (k === \"Year\") {\n      setFilter(\"Year\");\n      let value = valuearr[valuearr.length - 1];\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (valuearr[0] === \"Before\") {\n        movies = filtermovies.filter(contact => parseInt(contact.Year) < parseInt(value));\n      } else {\n        movies = filtermovies.filter(contact => parseInt(value) - 2 <= parseInt(contact.Year) && parseInt(contact.Year) < parseInt(value));\n      }\n    } else if (k === \"Rating\") {\n      setFilter(\"Rating\");\n      let value = valuearr[valuearr.length - 1];\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (valuearr[0] === \"Below\") {\n        movies = filtermovies.filter(contact => parseInt(contact.imdbRating) < parseInt(value));\n      } else {\n        movies = filtermovies.filter(contact => parseInt(value) - 2 <= parseInt(contact.Year) && parseInt(contact.imdbRating) < parseInt(value));\n      }\n    } else if (k === \"Country\") {\n      setFilter(\"Country\");\n\n      if (valuearr[0] === \"All\") {\n        movies = filtermovies;\n      } else if (v === \"USA\") {\n        movies = filtermovies.filter(contact => contact.Country === \"USA\");\n      } else {\n        movies = filtermovies.filter(contact => contact.Country !== \"USA\");\n      }\n    } else if (k === \"Clean Filter\") {\n      movies = originalmovies;\n    }\n\n    setLoadedMovies(movies);\n  };\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedTheatres, currentPage, PaginationPage]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: LoadedTheatres.length,\n    currentpage: currentPage,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), !isLoading && LoadedTheatres && React.createElement(PlaceList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n};\n\nexport default UserPlaces;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/places/pages/UserPlaces.js"],"names":["PlaceList","React","useEffect","useState","useHttpClient","LoadingSpinner","PaginationPage","UserPlaces","LoadedTheatres","setLoadedTheatres","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","Sort","setSort","Filter","setFilter","Search","setSearch","originatheatres","setoriginatheatres","filtertheatres","setfiltertheatres","fetchTheatres","response","fetch","responseData","json","ok","Error","message","cinemas","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","sortby","method","theatres","sort","a","b","cinema_name","toLowerCase","distance","searchtheatre","e","title","originaltheatres","filter","contact","Title","split","join","indexOf","description","originalmovies","Plot","setLoadedMovies","elements","changeFilter","k","v","movies","valuearr","value","length","filtermovies","parseInt","Year","imdbRating","Country","updatePosts","slice","errorHandler"],"mappings":"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","sourcesContent":["import PlaceList from '../components/PlaceList';\nimport React, { useEffect,useState } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nconst UserPlaces = () => {\n  const[LoadedTheatres,setLoadedTheatres] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n  const[originatheatres,setoriginatheatres]=useState([]);\n  const[filtertheatres,setfiltertheatres] = useState([]);\n\n\n  useEffect(()=>{\n\n    const fetchTheatres = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/theatres`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setoriginatheatres(responseData.cinemas)\n        setLoadedTheatres(responseData.cinemas);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchTheatres();\n  },[]);\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n   const sortby = method => {\n    let theatres;\n    if(method === \"Name(A-Z)\"){\n       theatres = LoadedTheatres.sort((a,b)=>{\n       setSort(method);\n       if(a.cinema_name.toLowerCase() < b.cinema_name.toLowerCase()) return -1;\n       if(a.cinema_name.toLowerCase() > b.cinema_name.toLowerCase()) return 1;\n       return 0;\n     })\n    }else if(method === \"Distance (nearby)\"){\n      setSort(method);\n      theatres = LoadedTheatres.sort((a,b)=>{\n      return a.distance - b.distance;\n     })\n    }\n    setLoadedTheatres(theatres);\n  }\n\n const searchtheatre = e =>{ \n  \n   setSearch(e);\n   let title;\n   title = originaltheatres.filter((contact) =>{\n     return contact.Title.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1 ;\n   });\n   description = originalmovies.filter((contact) =>{\n     return contact.Plot.toLowerCase().split(' ').join('').indexOf(e.toLowerCase()) !== -1 ;\n  });\n   setLoadedMovies(title === null ? description:title);\n }\n const elements = {\n   \"Year\":{\"Year\":[\"Before 2010\",\"2010 - 2012\",\"2012 - 2014\",\"2014 - 2016\",\"2016 - 2018\",\"2018 - 2020\",\"All\"]},\n   \"Rating\":{\"Rating\":[\"Below 5\",\"5 - 7\",\"7 - 8\",\"8 - 10\",\"All\"]},\n   \"Country\":{\"Country\":[\"USA\",\"Others\",\"All\"]},\n }\n const changeFilter = (k,v) => {\n   let movies;\n   let valuearr = v.split(\" \");\n  if(k === \"Year\"){\n    setFilter(\"Year\");     \n    let value = valuearr[valuearr.length-1];\n    if(valuearr[0]===\"All\") {\n     movies = filtermovies;\n   }\n    else if(valuearr[0] === \"Before\"){\n       movies = filtermovies.filter((contact)=>(parseInt(contact.Year) < parseInt(value)));\n    }else{   \n       movies = filtermovies.filter((contact)=>(parseInt(value)-2 <= parseInt(contact.Year) && parseInt(contact.Year) < parseInt(value)));\n    }\n   \n  }else if(k === \"Rating\"){\n    setFilter(\"Rating\");      \n      let value = valuearr[valuearr.length-1];\n      if(valuearr[0] ===\"All\") {\n        movies = filtermovies;\n      }\n      else if(valuearr[0] === \"Below\"){\n        \n        movies = filtermovies.filter((contact)=>(parseInt(contact.imdbRating) < parseInt(value)));\n      }else{\n       movies = filtermovies.filter((contact)=>(parseInt(value)-2 <= parseInt(contact.Year) && parseInt(contact.imdbRating) < parseInt(value)));\n      }\n    }else if(k === \"Country\"){\n     setFilter(\"Country\");\n     if(valuearr[0]===\"All\") {\n       movies = filtermovies;\n     }\n     else if(v === \"USA\"){\n       movies =filtermovies.filter((contact)=>contact.Country === \"USA\");\n      }else{\n       movies = filtermovies.filter((contact)=>contact.Country !== \"USA\");\n      }     \n }else if(k === \"Clean Filter\"){\n    movies = originalmovies;\n }\n setLoadedMovies(movies);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n    setcurrentPosts(LoadedTheatres.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedTheatres,currentPage,PaginationPage]);\n\n  const errorHandler = () =>{\n    setError=(null);\n  }\n   \n  \n\n  return(       \n    <React.Fragment>\n    <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedTheatres.length} currentpage={currentPage} paginate={paginate}/>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedTheatres && <PlaceList items={currentPosts} />}\n     </React.Fragment>)\n  };\n\nexport default UserPlaces;\n"]},"metadata":{},"sourceType":"module"}