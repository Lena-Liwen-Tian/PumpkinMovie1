{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sort from '../../shared/components/UIElements/Sort';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  const [Sort, setSort] = useState(\"\");\n  const [Filter, setFilter] = useState(\"\");\n  const [Search, setSearch] = useState(\"\");\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []); //Loaded movies is the the original one or changed because of the sorting and filter\n  //added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n  //has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(() => {\n    const updatePosts = () => {\n      if (Sort === \"alphe\") {\n        let movies = LoadedMovies.sort((a, b) => {\n          if (a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n          if (a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n          return 0;\n        });\n        setLoadedMovies(movies);\n      }\n\n      ;\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, PaginationPage, Sort, Filter, Search]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    currentpage: currentPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/FRONTEND 2/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Sort","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","setSort","Filter","setFilter","Search","setSearch","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","updatePosts","sort","a","b","Title","toLowerCase","slice","length"],"mappings":"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","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nimport Sort from '../../shared/components/UIElements/Sort';\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n  const [Sort,setSort] = useState(\"\");\n  const[Filter,setFilter] = useState(\"\");\n  const[Search,setSearch] = useState(\"\");\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n  \n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n//Loaded movies is the the original one or changed because of the sorting and filter\n//added the sort and filter(GROUP,year,rating(range,above),genre,country),search(keyword) first then add the pigination\n//has a default sorting method(ALPHEBETIC, year,timelength/runtime,rating), the default of search is 0;\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n      if(Sort===\"alphe\"){\n        let movies = LoadedMovies.sort((a,b)=>{\n          if(a.Title.toLowerCase() < b.Title.toLowerCase()) return -1;\n          if(a.Title.toLowerCase() > b.Title.toLowerCase()) return 1;\n          return 0;\n        })\n        setLoadedMovies(movies);\n      };\n \n    \n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,PaginationPage,Sort,Filter,Search]);\n    \n  return(       \n    <React.Fragment>\n   \n    <PaginationPage postsPerPage={postsPerPage} currentpage={currentPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}